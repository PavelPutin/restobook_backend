version: '3.9'

networks:
  restobook-net:
    driver: bridge

volumes:
  restobook-data:
  restobook-pgadmin-servers:
  logs:
#  certbot-etc:
#  certbot-var:
#  web-root:
#  dhparam:
#    driver: local
#    driver_opts:
#      type: none
#      device: /root/restobook_backend/dhparam/
#      o: bind

services:
#  nginx:
#    container_name: nginx
#    image: nginx:1.25
#    restart: always
#    depends_on:
#      - restobook-api
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - ./nginx/conf.d:/etc/nginx/conf.d
#      - ./nginx/conf.d/bundle.crt:/etc/ssl/bundle.crt
#      - ./nginx/conf.d/private.key:/etc/ssl/private.key
#      - ./docs:/www/data
#      #      - web-root:/var/www/html
#    #      - certbot-etc:/etc/letsencrypt
#    #      - certbot-var:/var/lib/letsencrypt
#    #      - dhparam:/etc/ssl/certs
#    networks:
#      - restobook-net

  #  certbot:
  #    image: certbot/certbot
  #    depends_on:
  #      - nginx
  #    container_name: certbot
  #    volumes:
  #      - certbot-etc:/etc/letsencrypt
  #      - certbot-var:/var/lib/letsencrypt
  #      - web-root:/var/www/html
  #    command: certonly --webroot --webroot-path=/var/www/html --email pavelputin2003@yandex.ru --agree-tos --no-eff-email --force-renewal -d 2778989-ta65313.twc1.net -d www.2778989-ta65313.twc1.net

#  restobook-api:
#    container_name: restobook-api
#    build:
#      context: .
#      target: development
#      dockerfile: Dockerfile
#    networks:
#      - restobook-net
#    ports:
#      - "8181:8181"
#    depends_on:
#      - restobook-db
#    environment:
#      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#    volumes:
#      - logs:/logs

  restobook-db:
    container_name: restobook-db
    image: postgres:16.2
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    networks:
      - restobook-net
    volumes:
      - restobook-data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    restart: unless-stopped
    ports:
      - "5432:5432"
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 5s
      timeout: 5s
      retries: 5

        #pgadmin:
        #container_name: pgadmin
        #    image: elestio/pgadmin:REL-8_3
        #    environment:
        #      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        #      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        #    networks:
        #      - restobook-net
        #    restart: unless-stopped
        #    ports:
        #      - "8080:80"
        #    volumes:
        #      - restobook-pgadmin-servers:/pgadmin4/servers.json
        #    depends_on:
      #      - restobook-db

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0
    restart: unless-stopped
    command:
      [ "start-dev" ]
    environment:
      KC_DB: ${KEYCLOAK_DB_VENDOR}
      KC_DB_URL: ${KEYCLOAK_POSTGRES_URL}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_LOGLEVEL: DEBUG
    ports:
      - "8081:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://0.0.0.0:8081/realms/master" ]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s
    depends_on:
      restobook-db:
        condition: service_healthy
    networks:
      - restobook-net